! Program to test the generation of the Faure sequence.
!
program test_faure

  use qmcpack

  integer(kind=i4b)                            :: n, s
  integer(kind=i4b)                            :: i
  integer(kind=i4b), dimension(:), allocatable :: startindex
  integer(kind=i4b), dimension(:), allocatable :: step
  real(kind=qp), dimension(:,:), allocatable   :: x
  real(kind=qp), dimension(:), allocatable     :: x_1p
  character(len=20)                            :: fmt_string
  logical                                      :: equal
  integer                                      :: my_unit

  call show_test_header("MOD_FAURE")
  call init_assert()

  call start_test("Testing Faure generator by checking first 9 points manually")
  n = 9
  s = 2
  allocate(x(n,s), startindex(s), step(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="None", init_startindex=startindex, init_step=step)
  do i = 1,n
    call next_faure(x(i,:))
  end do
  call assert(x(1,:), (/ 0.0_qp, 0.0_qp /) )
  call assert(x(2,:), (/ 0.5_qp, 0.5_qp /) )
  call assert(x(3,:), (/ 0.25_qp, 0.75_qp /) )
  call assert(x(4,:), (/ 0.75_qp, 0.25_qp /) )
  call assert(x(5,:), (/ 0.125_qp, 0.625_qp /) )
  call assert(x(6,:), (/ 0.625_qp, 0.125_qp /) )
  call assert(x(7,:), (/ 0.375_qp, 0.375_qp /) )
  call assert(x(8,:), (/ 0.875_qp, 0.875_qp /) )
  call assert(x(9,:), (/ 0.0625_qp, 0.9375_qp /) )
  deallocate(x, startindex, step)
  call free_faure()
  call stop_test()

  call start_test("Testing init_faure() and next_faure() by writing 1025 40D points to faure_bratley_fox.dat" // &
    "and comparing these with points generated by Bratley-Fox implementation...")
  n = 1025
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  step = 1
  call init_faure_bratley_fox(n, s)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_bratley_fox.dat", "write")
  do i=1,n
    call next_faure_bratley_fox(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  call compare_pointsets("faure_bratley_fox.dat",                     &
                         "test_data/FAURE_BRATLEY_FOX_40D_1025P.DAT", &
                         1.0e-14_qp, equal)
  if (.not. equal) then
    call increase_nb_assert_errors(1)
  end if
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing init_faure() and next_faure() by writing 1025 40D points to faure_bratley_fox2.dat" // &
    "and comparing these with points generated by Bratley-Fox implementation...")
  n = 1025
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  step = 1
  call init_faure(n, s, init_scrambletype="None")
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_bratley_fox2.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  call compare_pointsets("faure_bratley_fox2.dat",                    &
                         "test_data/FAURE_BRATLEY_FOX_40D_1025P.DAT", &
                         1.0e-14_qp, equal)
  if (.not. equal) then
    call increase_nb_assert_errors(1)
  end if
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure with InversivePre scrambling by writing points to faure_inversive_pre.dat")
  n = 1024
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="InversivePre", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_inversive_pre.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure with InversivePost scrambling by writing points to faure_inversive_post.dat")
  n = 1024
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="InversivePost", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_inversive_post.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure with Left I-binomial scrambling by writing points to faure_left_i_binomial.dat")
  n = 1024
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), step(s), startindex(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="LeftIbinomial", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_left_i_binomial.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, step, startindex)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure with StripedMatrix scrambling by writing points to faure_striped_matrix.dat")
  n = 1024
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), step(s), startindex(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="StripedMatrix", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_striped_matrix.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, step, startindex)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure with GFaure scrambling by writing points to gfaure.dat")
  n = 1024
  s = 40
  allocate(x_1p(s), startindex(s), step(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="GFaure", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "gfaure.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing Faure by writing points to faure.dat")
  n = 39
  s = 4
  allocate(x_1p(s), step(s), startindex(s))
  step = 1
  startindex = 0
  call init_faure(n, s, init_scrambletype="None", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure.dat", "write")
  do i=1,n
    call next_faure(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Testing init_faure_gray() and next_faure_gray() by writing 1025 20D points to" // &
    " faure_thiemard.dat and comparing with points generated by Thiemard's implementation...")
  n = 1025
  s = 20
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  startindex = 1
  step = 1
  call init_faure_gray(n, s, init_scrambletype="None", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_thiemard.dat", "write")
  do i=1,n
    call next_faure_gray(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  call compare_pointsets("faure_thiemard.dat",                          &
                         "test_data/faure_gray_thiemard_1025p_20d.dat", &
                         1.0e-14_qp, equal)
  if (.not. equal) then
    call increase_nb_assert_errors(1)
  end if
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call start_test("Writing 1024 40D Faure points in Gray-code order to faure_gray_1024p_40d.dat...")
  n = 1024
  s = 40
  write(unit=fmt_string, fmt="(A, I0.0, A)") "(", s, "F18.15)"
  allocate(x_1p(s), startindex(s), step(s))
  startindex = 1
  step = 1
  call init_faure_gray(n, s, init_scrambletype="None", init_startindex=startindex, init_step=step)
  call get_unit(my_unit)
  call checked_open(my_unit, "faure_gray_1024p_40d_none.dat", "write")
  do i=1,n
    call next_faure_gray(x_1p)
    write(unit=my_unit, fmt=fmt_string) x_1p
  end do
  call checked_close(my_unit)
  call compare_pointsets("faure_gray_1024p_40d_none.dat",                          &
                         "test_data/ALG823_FAURE_40D_1024P.DAT", &
                         1.0e-14_qp, equal)
  if (.not. equal) then
    call increase_nb_assert_errors(1)
  end if
  deallocate(x_1p, startindex, step)
  call free_faure()
  call stop_test()


  call show_test_summary(get_nb_assert_errors())

end program test_faure
